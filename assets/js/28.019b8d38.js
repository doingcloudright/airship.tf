(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{158:function(t,s,n){"use strict";n.r(s);var e=n(18),a=Object(e.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"ecs-cluster"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ecs-cluster","aria-hidden":"true"}},[t._v("#")]),t._v(" ECS Cluster")]),t._v(" "),n("h2",{attrs:{id:"introduction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introduction","aria-hidden":"true"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),n("p",[t._v("The ECS Cluster is an AWS managed docker container scheduler. The scheduler manages how ECS Services and ECS Tasks are working on either AWS Managed Infrastructure (Fargate) or on EC2 instances. To have ECS Services running on EC2 Instances, EC2 Instances need to be prepared with an ECS Agent, a service which communicates with the ECS Scheduler.")]),t._v(" "),n("p",[t._v("In every region AWS Provides with specific Amazon Linux AMI's made for running ECS. These Images need little bootstrap user-data to become configured as ECS Instance. To make sure the EC2 Instances belonging to an ECS Cluster are fault-tolerant and to give them the ability to scale the EC2 Instances are part of an Autoscaling Group.")]),t._v(" "),n("p",[t._v("An EC2 Instance Profile together with an IAM role for the ECS-Agent make sure the ECS Agent has the permissions to communicate with the ECS Scheduler and to receive be able to get an ecr GetAuthorizationToken to be able to pull images from ECR Repositories.")]),t._v(" "),n("h2",{attrs:{id:"launch-types"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#launch-types","aria-hidden":"true"}},[t._v("#")]),t._v(" Launch Types")]),t._v(" "),n("p",[t._v("On page [link] we discuss the settings for the Fargate Launch type, the page will focus on running ECS Services on top EC2 instances. It's important to know that the ECS Cluster Module is always configured for the Fargate Launch type either way. This pages will discuss the configuration for having EC2 Intances as ECS Backend.")]),t._v(" "),n("h2",{attrs:{id:"terraform-implementation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#terraform-implementation","aria-hidden":"true"}},[t._v("#")]),t._v(" Terraform Implementation")]),t._v(" "),n("div",{staticClass:"warning custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("The name you choose for the ECS Cluster will be interpolated into different resources, for example the Application Load Balancer target groups. Certain AWS resources have a name limitation of 32 characters hence it's important to be economical with the amount of chars you allocate to the cluster name. Once a cluster has been created it's not possible to rename it, plan wisely.")])]),t._v(" "),n("h3",{attrs:{id:"vpc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vpc","aria-hidden":"true"}},[t._v("#")]),t._v(" VPC")]),t._v(" "),n("p",[t._v("For EC2 Instances to operate properly we need a VPC and a few other things. Make sure to adjust the values according to your region and capacity wishes.")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("# VPC Definition\nmodule "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vpc"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  source  = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"terraform-aws-modules/vpc/aws"')]),t._v("\n  version = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.46.0"')]),t._v("\n\n  name = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ecs-vpc"')]),t._v("\n  cidr = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10.50.0.0/16"')]),t._v("\n\n  azs             = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eu-central-1a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eu-central-1b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  public_subnets  = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10.50.11.0/24"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10.50.12.0/24"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  private_subnets = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10.50.21.0/24"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10.50.22.0/24"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  single_nat_gateway = "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n  enable_nat_gateway   = "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  enable_vpn_gateway   = "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  enable_dns_hostnames = "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n  tags = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Terraform   = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"security-groups"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#security-groups","aria-hidden":"true"}},[t._v("#")]),t._v(" Security Groups")]),t._v(" "),n("p",[t._v("ECS will have network components just like EC2, in this example we need create a security group for the load balancer, a security group for the ECS Cluster nodes. With dynamic port mapping the ECS Docker containers have ports allocated at the EC2 instance in a range 32768-65535.")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("resource "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aws_security_group"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lb_sg"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name        = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"load-balancer-sg"')]),t._v("\n  description = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Allow all inbound traffic to http and https"')]),t._v("\n  vpc_id      = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${module.vpc.vpc_id}"')]),t._v("\n\n  ingress "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    from_port    = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n    to_port      = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n    protocol     = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tcp"')]),t._v("\n    cidr_blocks  = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0/0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  ingress "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    from_port    = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n    to_port      = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("443")]),t._v("\n    protocol     = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tcp"')]),t._v("\n    cidr_blocks  = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0/0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  egress "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    from_port   = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    to_port     = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    protocol    = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-1"')]),t._v("\n    cidr_blocks = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0/0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  tags "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Name = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"load-balancer-sg"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("The security group "),n("code",[t._v("ecs-instances-sg")]),t._v(" only allows incoming traffic on 32768-65535 coming from the Load Balancer security group and has no restrictions outgoing.")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("resource "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aws_security_group"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ecs_instances_sg"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name        = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ecs-instances-sg"')]),t._v("\n  description = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Allow all inbound traffic to dyamic ports"')]),t._v("\n  vpc_id      = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${module.vpc.vpc_id}"')]),t._v("\n\n  ingress "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    from_port       = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("32768")]),t._v("\n    to_port         = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("65535")]),t._v("\n    protocol        = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tcp"')]),t._v("\n    security_groups = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${aws_security_group.lb_sg.id}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  egress "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    from_port   = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    to_port     = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    protocol    = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-1"')]),t._v("\n    cidr_blocks = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.0.0.0/0"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  tags "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Name = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ecs-instances-sg"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"ecs-cluster-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ecs-cluster-module","aria-hidden":"true"}},[t._v("#")]),t._v(" ECS Cluster Module")]),t._v(" "),n("p",[t._v("The following code block creates an ECS Cluster with an Autoscaling Group (ASG) and its instances in the designated VPC and subnets. The instances will automatically be assigned with the given security groups ids. For security hardening purposes the EC2 metadata service can be blocked of by setting block_metadata_service to true.")]),t._v(" "),n("p",[t._v("By default the module sets "),n("code",[t._v("user_data")]),t._v(" for the launch configuration of the ASG to make sure the instances bootstrap in a certain way. Part of the userdata is the configuration of /etc/ecs/ecs.config which is the config file of the ECS Agent. By setting "),n("code",[t._v("ec2_custom_userdata")]),t._v(" with bash formatted script you can extend the bootprocess, for example, adding users and their public keys.")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("module "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ecs_web"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  source  = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blinkist/airship-ecs-cluster/aws"')]),t._v("\n  version = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.5.1"')]),t._v("\n\n  # name is re-used as a unique identifier for the creation of different resources\n  name            = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NAME"')]),t._v("\n\n  vpc_id          = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${module.vpc.vpc_id}"')]),t._v("\n  subnet_ids      = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${module.vpc.private_subnets}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  cluster_properties "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    # ec2_key_name defines the keypair\n    ec2_key_name = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${aws_key_pair.main.key_name}"')]),t._v("\n    # ec2_instance_type defines the instance type\n    ec2_instance_type = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t2.small"')]),t._v("\n    # ec2_custom_userdata sets the launch configuration userdata for the EC2 instances\n    ec2_custom_userdata = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n    # ec2_asg_min defines the minimum size of the autoscaling group\n    ec2_asg_min = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v("\n    # ec2_asg_max defines the maximum size of the autoscaling group\n    ec2_asg_max = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),t._v("\n    # ec2_disk_size defines the size in GB of the non-root volume of the EC2 Instance\n    ec2_disk_size = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100"')]),t._v("\n    # ec2_disk_type defines the disktype of that EBS Volume\n    ec2_disk_type = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gp2"')]),t._v("\n    # ec2_disk_encryption = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"true"')]),t._v("\n\n    # block_metadata_service blocks the aws metadata service from the ECS Tasks "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" / "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" this is preferred security wise\n    block_metadata_service = "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  # vpc_security_group_ids defines the security groups for the ec2 instances.\n  vpc_security_group_ids = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${module.ecs_instances_sg.this_security_group_id}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n\n  tags = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tEnvironment = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Development"')]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"ecs-cluster-scaling"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ecs-cluster-scaling","aria-hidden":"true"}},[t._v("#")]),t._v(" ECS Cluster Scaling")]),t._v(" "),n("p",[t._v("To configure the autoscaling group to scale up and down a few measures need to be taken. ECS Services which run inside the ECS Cluster need to be stopped and moved to other EC2 Nodes the moment the ECS Cluster is scaling down. A lambda function discussed in "),n("a",{attrs:{href:"https://aws.amazon.com/blogs/compute/how-to-automate-container-instance-draining-in-amazon-ecs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("This AWS Blog Article"),n("OutboundLink")],1),t._v(" describes how that works. That Lambda has been made into a Terraform Module and can be used by different ECS Clusters in the same account.")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v('module "ecs_draining '),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  source  = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blinkist/airship-ecs-instance-draining/aws"')]),t._v("\n  version = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.1.0"')]),t._v("\n  name    = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"drain"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"warning custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("It's important to create apply this module before refering to it in the ecs cluster module.")])]),t._v(" "),n("p",[t._v("After applying the instance draining module, "),n("code",[t._v("ecs_instance_scaling_create")]),t._v(" can be set to true and the module can refer to the "),n("code",[t._v("ecs_instance_draining_lambda_arn")]),t._v(". The parameter: "),n("code",[t._v("ecs_instance_scaling_properties")]),t._v(" configures a list with maps with the scaling movements.")]),t._v(" "),n("p",[t._v("https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("module "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ecs_web"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ..\n  ..\n  ..\n  # ecs_instance_scaling_create needs to be "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  ecs_instance_scaling_create = "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n  # The lambda function which takes care of draining the ecs instance\n  ecs_instance_draining_lambda_arn = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${module.ecs_draining.lambda_function_arn}"')]),t._v("\n\n  # ecs_instance_scaling_properties defines how the ECS Cluster scales up / down\n  ecs_instance_scaling_properties = "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     type = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MemoryReservation"')]),t._v("\n     direction = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"up"')]),t._v("\n     evaluation_periods = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n     observation_period = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"300"')]),t._v("\n     statistic = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Average"')]),t._v("\n     threshold = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"50"')]),t._v("\n     cooldown = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"900"')]),t._v("\n     adjustment_type = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ChangeInCapacity"')]),t._v("\n     scaling_adjustment = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     type = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MemoryReservation"')]),t._v("\n     direction = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"down"')]),t._v("\n     evaluation_periods = "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n     observation_period = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"300"')]),t._v("\n     statistic = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Average"')]),t._v("\n     threshold = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("\n     cooldown = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"300"')]),t._v("\n     adjustment_type = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ChangeInCapacity"')]),t._v("\n     scaling_adjustment = "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-1"')]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  ..\n  ..\n  ..\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])},[],!1,null,null,null);a.options.__file="README.md";s.default=a.exports}}]);