(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{181:function(e,t,s){"use strict";s.r(t);var a=s(18),n=Object(a.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"airship-modules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#airship-modules","aria-hidden":"true"}},[e._v("#")]),e._v(" Airship Modules")]),e._v(" "),s("p",[e._v("Now that you've setup everything needed for Airship, we need to add the use of the airship modules to get a docker service running.")]),e._v(" "),s("h2",{attrs:{id:"airship-ecs-cluster"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#airship-ecs-cluster","aria-hidden":"true"}},[e._v("#")]),e._v(" Airship ECS Cluster")]),e._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("It's important to have finished the preparation steps before you continue here.")])]),e._v(" "),s("p",[e._v("The "),s("a",{attrs:{href:"https://github.com/blinkist/terraform-aws-airship-ecs-cluster",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECS Cluster"),s("OutboundLink")],1),e._v(" module will create the ECS Cluster in your region. The module can be used for both ECS Fargate and for running an ECS Cluster on top of EC2 instances. For this example we won't be needing EC2 instances so we configure the module to not use them.")]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[e._v("module "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ecs"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  source  = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"blinkist/airship-ecs-cluster/aws"')]),e._v("\n  version = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0.5.1"')]),e._v("\n\n  name = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ecs-demo"')]),e._v("\n\n  # create_roles defines if we create IAM Roles for EC2 instances\n  create_roles = "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n\n  # create_autoscalinggroup defines if we create an ASG for ECS\n  create_autoscalinggroup = "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("Apply your added terraform code, in the EC2 Panel on the AWS Console you will see your newly created ECS Cluster.")]),e._v(" "),s("h2",{attrs:{id:"airship-ecs-service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#airship-ecs-service","aria-hidden":"true"}},[e._v("#")]),e._v(" Airship ECS Service")]),e._v(" "),s("p",[e._v("Now that we have an ECS Cluster, we need to add an actual service. For this demonstration, we will use a very standard "),s("code",[e._v("nginx:stable")]),e._v(" docker image. A summary of the specifics of the service. Replace "),s("code",[e._v("<YOUR REGION>")]),e._v(" with the active AWS region.")]),e._v(" "),s("ul",{staticClass:"contains-task-list"},[s("li",{staticClass:"task-list-item"},[s("input",{staticClass:"task-list-item-checkbox",attrs:{checked:"",disabled:"",type:"checkbox"}}),e._v(" This ECS Service uses Fargate")]),e._v(" "),s("li",{staticClass:"task-list-item"},[s("input",{staticClass:"task-list-item-checkbox",attrs:{checked:"",disabled:"",type:"checkbox"}}),e._v(" The service is place inside a private subnet")]),e._v(" "),s("li",{staticClass:"task-list-item"},[s("input",{staticClass:"task-list-item-checkbox",attrs:{checked:"",disabled:"",type:"checkbox"}}),e._v(" HTTP is automatically redirected to https")]),e._v(" "),s("li",{staticClass:"task-list-item"},[s("input",{staticClass:"task-list-item-checkbox",attrs:{checked:"",disabled:"",type:"checkbox"}}),e._v(" Service is available through HTTPS")]),e._v(" "),s("li",{staticClass:"task-list-item"},[s("input",{staticClass:"task-list-item-checkbox",attrs:{checked:"",disabled:"",type:"checkbox"}}),e._v(" The ALB is polling / on the docker service and checks for a HTTP 200")])]),e._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[e._v("module "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"fargate_service"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  source  = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"blinkist/airship-ecs-service/aws"')]),e._v("\n  version = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0.9.2"')]),e._v("\n\n  name = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"demo-web"')]),e._v("\n\n  ecs_cluster_id = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${module.ecs.cluster_id}"')]),e._v("\n\n  region = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<YOUR REGION>"')]),e._v("\n\n\n  fargate_enabled = "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n\n  awsvpc_enabled            = "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n  awsvpc_subnets            = "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${module.vpc.private_subnets}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n  awsvpc_security_group_ids = "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${aws_security_group.ecs_service_sg.id}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\n  load_balancing_type = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"application"')]),e._v("\n  load_balancing_properties "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    # The ARN of the ALB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" when left-out the service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" \n  load_balancing_properties_lb_arn = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${module.alb_shared_services_external.load_balancer_id}"')]),e._v("\n\n  # http listener ARN\n  load_balancing_properties_lb_listener_arn = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${element(module.alb_shared_services_external.http_tcp_listener_arns,0)}"')]),e._v("\n\n  # The VPC_ID the target_group is being created in\n  load_balancing_properties_lb_vpc_id = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${module.vpc.vpc_id}"')]),e._v("\n\n  # The route53 zone for which we create a subdomain\n  load_balancing_properties_route53_zone_id = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${data.aws_route53_zone.zone.zone_id}"')]),e._v("\n\n  # health_uri defines which health-check uri the target \n  # group needs to check on for health_check"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" defaults to /ping\n  load_balancing_properties_health_uri = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/"')]),e._v("\n\n  load_balancing_properties_https_enabled = "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n\n\n  container_cpu = "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("256")]),e._v("\n  container_memory = "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("512")]),e._v("\n  container_port   = "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("80")]),e._v("\n  bootstrap_container_image = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nginx:stable"')]),e._v("\n\n  # force_bootstrap_container_image to "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v(" will \n  # force the deployment to use var.bootstrap_container_image as container_image\n  # if container_image is already deployed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" no actual service update will happen\n  # force_bootstrap_container_image = "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n\n  # Initial ENV Variables for the ECS Task definition\n  container_envvars "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    ENV_VARIABLE = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"SOMETHING"')]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  # capacity_properties defines the size in task for the ECS Service.\n  # Without scaling enabled"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" desired_capacity is the only necessary property\n  # defaults to "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n  # With scaling enabled"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" desired_min_capacity and desired_max_capacity \n  # define the lower and upper boundary in task size\n  capacity_properties_desired_capacity = "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])])])},[],!1,null,null,null);n.options.__file="airship.md";t.default=n.exports}}]);