(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{168:function(n,t,e){"use strict";e.r(t);var s=e(18),a=Object(s.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"ecs-cron-tasks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ecs-cron-tasks","aria-hidden":"true"}},[n._v("#")]),n._v(" ECS Cron tasks")]),n._v(" "),e("h2",{attrs:{id:"introduction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introduction","aria-hidden":"true"}},[n._v("#")]),n._v(" Introduction")]),n._v(" "),e("p",[n._v("In many environments it's common to have cronjob like tasks. This module provide an easy way of configuring crontjobs for a running docker. The cronjobs will not be executed inside a running docker but a new task will be executed and the configured command will be ran.")]),n._v(" "),e("mermaid"),n._v(" "),e("div",{staticClass:"mermaid"},[n._v("\nsequenceDiagram\n    Cloudwatch Event->>Lambda: Triggers Lambda at given rate\n    Lambda->>AWS API ECS: Asks for task definition of current running service\n    AWS API ECS--\x3e>Lambda: task definition\n    Lambda->>AWS API ECS: Start Task Definition with given command\n")]),n._v(" "),e("h2",{attrs:{id:"implementation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implementation","aria-hidden":"true"}},[n._v("#")]),n._v(" Implementation")]),n._v(" "),e("p",[n._v("The "),e("code",[n._v("ecs_cron_tasks")]),n._v(" param holds a list of maps with information regarding the 'cron' jobs.")]),n._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[n._v("   # ecs_cron_tasks holds a list of maps defining scheduled jobs\n   # when ecs_cron_tasks holds at least one 'job' a lambda will be created which will\n   # trigger jobs with the currently running task definition. The given command will be used\n   # to override the CMD in the dockerfile. The lambda will prepend this command with "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"/bin/sh"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"-c"')]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n   ecs_cron_tasks = "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n     # name of the scheduled task\n     job_name            = "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"vacuum_db"')]),n._v("\n     # expression defined in\n     # http"),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v("//docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\n     schedule_expression = "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"cron(0 12 * * ? *)"')]),n._v("\n   \n     # command defines the command which needs to run inside the docker container\n     command             = "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"/usr/local/bin/vacuum_db"')]),n._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n     # name of the scheduled task\n     job_name            = "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"something_else"')]),n._v("\n     # expression defined in\n     # http"),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v("//docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html\n     schedule_expression = "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"rate(10 minutes)"')]),n._v("\n   \n     # command defines the command which needs to run inside the docker container\n     command             = "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"/usr/local/bin/something_else"')]),n._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n")])])])],1)},[],!1,null,null,null);a.options.__file="ecs_cron_tasks.md";t.default=a.exports}}]);